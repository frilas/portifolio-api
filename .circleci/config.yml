version: 2

jobs:
  test-api:
    docker:
      - image: circleci/ruby:2.6.5-node
        environment:
          RAILS_ENV: test

      - image: circleci/postgres
        name: db
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: portifolio_api_test
    working_directory: ~/portifolio-api
    steps:
      - checkout
      - run:
          name: install bundler
          command: gem install bundler
      - restore_cache:
          keys:
            - gem-cache-{{ checksum "Gemfile.lock" }}
      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle install --deployment --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: gem-cache-{{ checksum "Gemfile.lock" }}
      - run:
          name: Lint
          command: bundle exec rubocop .
      - run:
          name: Wait DB
          command: dockerize -wait tcp://db:5432 -timeout 1m
      - run:
          name: Setup DB
          command: bundle exec rake db:create db:schema:load
      - run:
          name: Run tests
          command: bundle exec rspec ./spec

  deploy-stg:
    machine:
      enabled: true
    working_directory: ~/portifolio-api
    steps:
      - checkout
      - run:
          name: Setup heroku
          command: bash  .circleci/setup-heroku.sh
      - run:
          name: Deploy!
          command: |
            git push staging master
            heroku run rake db:migrate -r staging
            sleep 5
            heroku restart -r staging

  deploy-prod:
    machine:
      enabled: true
    working_directory: ~/portifolio-api
    steps:
      - checkout
      - run:
          name: Setup heroku
          command: bash  .circleci/setup-heroku.sh
      - run:
          name: Deploy!
          command: |
            git push production master
            heroku run rake db:migrate -r production
            sleep 5
            heroku restart -r production

workflows:
  version: 2
  pipeline:
    jobs:
      - test-api
      - deploy-stg:
          requires:
            - test-api
          filters:
            branches:
              only: master
      - approve-deploy-prod:
          type: approval
          requires:
            - deploy-stg
      - deploy-prod:
          requires:
            - approve-deploy-prod
